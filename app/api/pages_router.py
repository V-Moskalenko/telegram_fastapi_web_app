import json
from typing import Annotated

from fastapi import APIRouter, Form
from fastapi.templating import Jinja2Templates
from fastapi.requests import Request
from fastapi.responses import HTMLResponse, JSONResponse
from aiogram.types.input_file import FSInputFile
from pydantic import ValidationError

from app.api.schemas import ApplicationServiceData, ApplicationData
from app.bot.create_bot import bot
from app.bot.keyboards.kbs import main_keyboard
from app.config import settings
from app.dao.dao import TrainingTypeDAO, TrainingProgramDAO, ApplicationDAO, UserDAO
from app.commercial_offer.offer_docx import fill_out_docx_template

router = APIRouter(prefix='', tags=['–§—Ä–æ–Ω—Ç–µ–Ω–¥'])
templates = Jinja2Templates(directory='app/templates')


@router.get("/", response_class=HTMLResponse)
async def get_application_form(request: Request):
    return templates.TemplateResponse("issue.html", {"request": request})


@router.get("/get_training_types")
async def get_training_types():
    types = await TrainingTypeDAO.find_all()
    return {"types": [{"id": t.id, "name": t.name} for t in types]}


@router.get("/get_programs")
async def get_programs(type_id: int):
    programs = await TrainingProgramDAO.find_all(training_type_id=type_id)
    return {"programs": [{"id": p.id, "name": p.name} for p in programs]}


@router.get("/applications", response_class=HTMLResponse)
async def get_applications(request: Request, user_id: int = None):
    data_page = {"request": request, "message": None}
    user_check = await UserDAO.find_one_or_none(telegram_id=user_id)
    if not user_id or not user_check:
        data_page['message'] = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
    applications = await ApplicationDAO.get_applications(user_id, admin=False)
    if not applications:
        data_page['message'] = ('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫! –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É" '
                                '–∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ó–∞—è–≤–∫–∏"')
    data_page['active_applications'] = tuple(filter(lambda x: x['status'] == '–í —Ä–∞–±–æ—Ç–µ', applications))
    data_page['completed_applications'] = tuple(filter(lambda x: x['status'] != '–í —Ä–∞–±–æ—Ç–µ', applications))
    return templates.TemplateResponse("applications.html", data_page)


@router.get("/admin_applications", response_class=HTMLResponse)
async def get_applications(request: Request, user_id: int, work: bool):
    data_page = {"request": request, "message": None, "active_applications": None, "completed_applications": None}
    if work:
        applications = await ApplicationDAO.get_applications(user_id, admin=True)
        active_applications = tuple(filter(lambda x: x['status'] == '–í —Ä–∞–±–æ—Ç–µ', applications))
        data_page['message'] = '–í—Å–µ –∑–∞—è–≤–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω—ã!' if not active_applications else None
        data_page['active_applications'] = active_applications if active_applications else None
    else:
        applications = await ApplicationDAO.get_applications(user_id, admin=True)
        completed_applications = tuple(filter(lambda x: x['status'] != '–í —Ä–∞–±–æ—Ç–µ', applications))
        data_page['message'] = '–ó–∞—è–≤–æ–∫ –≤ –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç!' if not completed_applications else None
        data_page['completed_applications'] = completed_applications if completed_applications else None
    return templates.TemplateResponse("admin_applications.html", data_page)


@router.post("/submit_application", response_class=JSONResponse)
async def get_programs(request: Request):
    data = await request.json()
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å
    data['status'] = '–í —Ä–∞–±–æ—Ç–µ'
    services_list = data.pop('services')
    # –ü—Ä–æ–≤–µ–¥–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∑–Ω–∞—á–µ–Ω–∏–π, —Å–æ—Å—Ç–∞–≤–∏–º –º–æ–¥–µ–ª–∏
    try:
        services_models_list = [ApplicationServiceData(**service) for service in services_list]
        application_data = ApplicationData(**data, services=services_models_list)
    except ValidationError as e:
        msg = '\n'.join([
            f'–û—à–∏–±–∫–∞ –≤ –ø–æ–ª–µ {error['loc'][0]} - {error["msg"]}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö'
            for error in e.errors()
        ])
        return JSONResponse(content={"status": "error", "message": msg}, status_code=400)
    application_data_val = application_data.dict()
    model, model_id = await ApplicationDAO.add_model(**application_data_val)
    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    user_info = await UserDAO.find_one_or_none(telegram_id=application_data.user_id)
    program_name = [await TrainingProgramDAO.find_one_or_none_by_id(i.training_program_id) for i in
                    services_models_list]
    program_info = [{'–ü—Ä–æ–≥—Ä–∞–º–º–∞': i.name, '–†–∞–∑—Ä—è–¥': j.training_rank, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': j.people_count} for i, j in
                    zip(program_name, services_models_list)]
    program_str = '\n'.join([(f"    ‚û§ {j['–ü—Ä–æ–≥—Ä–∞–º–º–∞']}{' ' + j['–†–∞–∑—Ä—è–¥'] + ' —Ä–∞–∑—Ä—è–¥–∞' if j['–†–∞–∑—Ä—è–¥'] else ''}"
                              f" –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {j['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} —á–µ–ª–æ–≤–µ–∫") for j in program_info])
    message = (
        f"üéâ <b>{user_info.first_name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        f"üì¨ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> {model_id}\n"
        "üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏:</b>\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {application_data.company_name}\n"
        f"üéì <b>–û–±—É—á–µ–Ω–∏–µ:</b>\n"
        f"{program_str}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞! ‚ú®"
    )
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = (
        "üîî <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>\n\n"
        "üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
        f"üì¨ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> {model_id}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {application_data.company_name}\n"
        f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {user_info.first_name}\n"
        f"üí¨ –¢–µ–ª–µ–≥—Ä–∞–º –∫–ª–∏–µ–Ω—Ç–∞: @{user_info.username}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {application_data.phone_number}\n"
        f"üìß –ü–æ—á—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞: {application_data.email}\n"
        f"üéì <b>–û–±—É—á–µ–Ω–∏–µ:</b>\n"
        f"{program_str}\n"
    )
    kb = main_keyboard(user_id=application_data.user_id, first_name=user_info.first_name)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º
    await bot.send_message(chat_id=application_data.user_id, text=message, reply_markup=kb)
    await bot.send_message(chat_id=settings.ADMIN_ID, text=admin_message, reply_markup=kb)
    return JSONResponse(content={"status": "success", "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"})


@router.post("/enter_prices", response_class=HTMLResponse)
async def enter_prices(request: Request, application_data: Annotated[str, Form()]):
    application = json.loads(application_data)
    # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–∫–µ
    return templates.TemplateResponse("enter_prices.html", {"request": request, "application": application})


@router.post("/application_work", response_class=JSONResponse)
async def get_programs(request: Request):
    data = await request.json()
    # –°–æ—Å—Ç–∞–≤–∏–º —Ñ–∞–π–ª –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    docx_offer = fill_out_docx_template(data)
    document = FSInputFile(docx_offer)
    total_sum = data.get("all_total")
    message = (
        f"üéâ <b>–ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ‚Ññ{data['id']}, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>\n\n"
        f"üí∞ <b>–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç:</b> {total_sum}\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É."
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞! ‚ú®"
    )
    await bot.send_message(chat_id=data['user_id'], text=message)
    await bot.send_document(chat_id=settings.ADMIN_ID, document=document)
    # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    await ApplicationDAO.update({'id': data['id']}, status=f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {total_sum}')
    return JSONResponse(content={"success": True})
